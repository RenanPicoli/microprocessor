--intructions categories (according to assembly)

R_type_mnemonics := {add,sub,and,or,xor,nor,slt,fadd,fsub,fdiv,fmul,sll,srl,sllv,srlv};--opcode and 3 registers (uses all bits, except sll/srl/srlv/sllv)
I_type_mnemonics := {beq,addi,subi,andi,ori,xori,nori,slti};-- opcode, 2 registers and 1 IMMEDIATE (use all bits)
B_type_mnemonics := {lui};-- opcode, 1 register and 1 IMMEDIATE(rt is don't care)
J_type_mnemonics := {jmp,call,addsp};-- opcode and 1 IMMEDIATE(uses all bits)
O_type_mnemonics := {halt,vmac,iack,ret,iret,nop};-- opcode ONLY
P_type_mnemonics := {push,pop,ldrv,ldfp,mflo,mfhi};-- opcode and 1 register
M_type_mnemonics := {mult,imul};-- opcode and 2 register
L_type_mnemonics := {lvec};-- opcode and 2 IMMEDIATES
S_type_mnemonics := {sw,lw};-- opcode, 2 registers and 1 IMMEDIATE for MEMORY access (uses squared brackets, fills all bits), offset is mandatory, even if it is zero, for negative offsets, use "- |offset|"

--opcodes (keep it in ascending order)

R_type	:= "000000";
ori	:= "000001";
jmp	:= "000010";
andi	:= "000011";
beq	:= "000100";
mult	:= "000101";
halt	:= "000110";
lvec	:= "000111";
addi	:= "001000";
subi	:= "001001";
--	 iack	:= "001010";
imul	:= "001101";
vmac	:= "001111";
xori	:= "010000";
lui		:= "010001";
lvecr	:= "010010";

nori	:= "010100";
slti	:= "010101";

lw		:= "100011";
mflo	:= "100101";
sw		:= "101011";
mfhi	:= "101101";
ldfp	:= "110000";--loads fp to register
ldrv	:= "110001";--loads rv to register
addsp	:= "110010";--adds sp to immediate
push	:= "110011";--pushes specified GPR to program stack
pop	:= "110100";--pops specified GPR from program stack
call	:= "110101";--jumps to immediate and save return address to LR
ret	:= "110110";--jumps to link register, stores return value in RV and restores FP
iret	:= "110111";--jumps to link register and restores FP (IRQHandlers don't have return value)		
nop	:= "111111";--no operation (bubble)	

--funct codes: use only with R_type
add_funct	:= "100000";
sub_funct	:= "100010";
and_funct	:= "100100";
or_funct	:= "100101";
xor_funct	:= "100111";
nor_funct	:= "101000";
slt_funct	:= "101010";
fadd_funct	:= "000000";
fsub_funct	:= "000010";
fmul_funct	:= "000001";
fdiv_funct	:= "000011";
sll_funct	:= "010010";--shll in my_types
srl_funct	:= "010011";--shrl in my_types
sllv_funct	:= "010110";--sll with offset in register bits 4:0
srlv_funct	:= "010111";--srl with offset in register bits 4:0

--register codes
r0	:= "00000";
r1	:= "00001";
r2	:= "00010";
r3	:= "00011";
r4	:= "00100";
r5	:= "00101";
r6	:= "00110";
r7	:= "00111";
r8	:= "01000";
r9	:= "01001";
r10	:= "01010";
r11	:= "01011";
r12	:= "01100";
r13	:= "01101";
r14	:= "01110";
r15	:= "01111";
r16	:= "10000";
r17	:= "10001";
r18	:= "10010";
r19	:= "10011";
r20	:= "10100";
r21	:= "10101";
r22	:= "10110";
r23	:= "10111";
r24	:= "11000";
r25	:= "11001";
r26	:= "11010";
r27	:= "11011";
r28	:= "11100";
r29	:= "11101";
r30	:= "11110";
r31	:= "11111";
